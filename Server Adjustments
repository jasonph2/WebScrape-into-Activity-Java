#This code does not contain all the code from the server, simply the adjustments that I had made for this activity.

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;
import edu.illinois.cs.cs124.ay2022.mp.application.FavoritePlacesApplication;
import edu.illinois.cs.cs124.ay2022.mp.models.Place;
import java.io.IOException;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Scanner;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.mockwebserver.Dispatcher;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import okhttp3.mockwebserver.RecordedRequest;

#GET Request
private MockResponse getTopRecommendations() throws JsonProcessingException {
    return new MockResponse()
        .setResponseCode(HttpURLConnection.HTTP_OK)
        .setBody(OBJECT_MAPPER.writeValueAsString(topRecommendations))
        .setHeader("Content-Type", "application/json; charset=utf-8");
  }
  
#A lot of this function was not code that I wrote other than a few of the GET methods
public MockResponse dispatch(final RecordedRequest request) {
    try {
      // Reject malformed requests
      if (request.getPath() == null || request.getMethod() == null) {
        return new MockResponse().setResponseCode(HttpURLConnection.HTTP_BAD_REQUEST);
      }
      String path = request.getPath().replaceFirst("/*$", "").replaceAll("/+", "/");
      String method = request.getMethod().toUpperCase();
      if (path.equals("") && method.equals("GET")) {
        return new MockResponse().setBody("CS 124").setResponseCode(HttpURLConnection.HTTP_OK);
      } else if (path.equals("/reset") && method.equals("GET")) {
        doReset();
        return new MockResponse().setResponseCode(HttpURLConnection.HTTP_OK);
      } else if (path.equals("/places") && method.equals("GET")) {
        return getPlaces();
      } else if (path.equals("/favoriteplace") && method.equals("POST")) {
        return postFavoritePlace(request);
      } else if (path.equals("/recommendations") && method.equals("GET")) {
        return getRecommendations();
      } else if (path.equals("/images") && method.equals("GET")) {
        return getImages();
      } else if (path.equals("/topRecommendations") && method.equals("GET")) {
        return getTopRecommendations();
      }
      return new MockResponse()
          .setResponseCode(HttpURLConnection.HTTP_NOT_FOUND)
          .setBody("Not Found");
    } catch (Exception e) {
      System.out.println(e);
      return new MockResponse().setResponseCode(HttpURLConnection.HTTP_INTERNAL_ERROR);
    }

public static List<String> loadRecommendations() throws JsonProcessingException {
    String input = new Scanner(Server.class.getResourceAsStream("/recommendations.csv"), "UTF-8")
        .useDelimiter("\\A").next();
    List<String> toReturn = new ArrayList<>();
    CSVReader csvReader = new CSVReaderBuilder(new StringReader(input)).build();
    for (String[] parts : csvReader) {
      for (int i = 0; i < parts.length; i++) {
        if (parts[i].length() > 1) {
          toReturn.add(parts[i]);
        }
      }
    }
    System.out.println(toReturn);
    return toReturn;
  }
  
  public static List<String> loadImages() throws JsonProcessingException {
    String input = new Scanner(Server.class.getResourceAsStream("/images.csv"), "UTF-8").useDelimiter("\\A").next();
    List<String> toReturn = new ArrayList<>();
    CSVReader csvReader = new CSVReaderBuilder(new StringReader(input)).build();
    for (String[] parts : csvReader) {
      for (int i = 0; i < parts.length; i++) {
        if (parts[i].length() > 1) {
          toReturn.add(parts[i]);
        }
      }
      System.out.println(toReturn);
    }
    return toReturn;
  }
#Combines the name of the place with a corresponding image URL

  public static List<List<String>> combination(final List<String> names, final List<String> images) {
    List<List<String>> toReturn = new ArrayList<>();
    toReturn.add(names);
    toReturn.add(images);
    return toReturn;
  }
   private void doReset() {
    try {
      places = loadPlaces();
      topRecommendations = combination(loadRecommendations(), loadImages());
    } catch (JsonProcessingException exception) {
      throw new IllegalStateException(exception);
    }
  }
